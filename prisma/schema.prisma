// This is the Prisma schema generated based on your ER diagram.
// Some naming and relational inconsistencies have been corrected.

// --------------------------------------
// Datasource & Generator
// --------------------------------------
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------
// Enums
// --------------------------------------
enum Role {
  USER
  ADMIN
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum QuestionType {
  SHORT_TEXT
  FILL_BLANK
  MULTI_CHOICE
}

// --------------------------------------
// Models
// --------------------------------------
model User {
  id           String   @id @default(uuid())
  name         String
  email        String?  @unique
  password     String
  avatarUrl    String?
  level        Level    @default(BEGINNER)
  role         Role     @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  refreshToken String?

  listeningSubmissions ListeningSubmission[]
  readingSubmissions   ReadingSubmission[]

  following Follows[] @relation("Following")
  followers Follows[] @relation("Followers")
}

model Admin {
  id           String   @id @default(uuid())
  password     String
  name         String   @unique
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Follows {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  follower  User @relation("Followers", fields: [followerId], references: [id])
  following User @relation("Following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model ListeningTest {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now())

  passages    ListeningPassage[]
  submissions ListeningSubmission[]
}

model ListeningPassage {
  id     String        @id @default(uuid())
  test   ListeningTest @relation(fields: [testId], references: [id])
  testId String
  title  String
  order  Int

  sections ListeningSection[]
}

model ListeningSection {
  id        String           @id @default(uuid())
  passage   ListeningPassage @relation(fields: [passageId], references: [id])
  passageId String

  title    String
  audioUrl String
  order    Int

  questions ListeningQuestion[]
}

model ListeningQuestion {
  id           String           @id @default(uuid())
  section      ListeningSection @relation(fields: [sectionId], references: [id])
  sectionId    String
  questionText String
  order        Int
  questionType QuestionType

  answers             ListeningAnswer[]
  ListeningUserAnswer ListeningUserAnswer[]
}

model ListeningSubmission {
  id          String        @id @default(uuid())
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  test        ListeningTest @relation(fields: [testId], references: [id])
  testId      String
  score       Int
  startedAt   DateTime      @default(now())
  completedAt DateTime?

  answers ListeningAnswer[]
}

model ListeningAnswer {
  id                  String                @id @default(uuid())
  submission          ListeningSubmission   @relation(fields: [submissionId], references: [id])
  submissionId        String
  question            ListeningQuestion     @relation(fields: [questionId], references: [id])
  questionId          String
  answerText          String
  isCorrect           Boolean
  ListeningUserAnswer ListeningUserAnswer[]
}

model ListeningUserAnswer {
  id                String            @id @default(uuid())
  question          ListeningQuestion @relation(fields: [questionId], references: [id])
  questionId        String
  answer            ListeningAnswer   @relation(fields: [listeningAnswerId], references: [id])
  answerId          String
  isCorrect         Boolean
  listeningAnswerId String
}

model ReadingTest {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now())

  passages    ReadingPassage[]
  submissions ReadingSubmission[]
}

model ReadingPassage {
  id      String      @id @default(uuid())
  test    ReadingTest @relation(fields: [testId], references: [id])
  testId  String
  content String
  order   Int

  sections ReadingSection[]
}

model ReadingSection {
  id          String         @id @default(uuid())
  passage     ReadingPassage @relation(fields: [passageId], references: [id])
  passageId   String
  title       String
  description String?

  questions ReadingQuestion[]
}

model ReadingQuestion {
  id             String         @id @default(uuid())
  section        ReadingSection @relation(fields: [sectionId], references: [id])
  sectionId      String
  questionText   String
  questionType   QuestionType
  correctAnswers Json
  order          Int

  answers           ReadingAnswer[]
  ReadingUserAnswer ReadingUserAnswer[]
}

model ReadingSubmission {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  test        ReadingTest @relation(fields: [testId], references: [id])
  testId      String
  score       Int
  startedAt   DateTime    @default(now())
  completedAt DateTime?

  answers ReadingAnswer[]
}

model ReadingAnswer {
  id           String            @id @default(uuid())
  submission   ReadingSubmission @relation(fields: [submissionId], references: [id])
  submissionId String
  question     ReadingQuestion   @relation(fields: [questionId], references: [id])
  questionId   String
  userAnswer   String
  isCorrect    Boolean
}

model ReadingUserAnswer {
  id           String          @id @default(uuid())
  question     ReadingQuestion @relation(fields: [qestionId], references: [id])
  qestionId    String
  questionType QuestionType
  isCorrect    Boolean
}
