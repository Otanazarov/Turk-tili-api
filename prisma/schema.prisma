datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum TestType {
  LISTENING
  READING
}

enum QuestionType {
  TEXT_INPUT
  MULTIPLE_CHOICE
  MULTI_SELECT
  MATCHING
  TRUE_FALSE
  FILL_BLANK
}

enum IELTSLevel {
  A0
  A1
  A2
  B1
  B2
  C1
  C2
}

model User {
  id           String      @id @default(uuid())
  email        String      @unique
  password     String
  name         String?
  avatarUrl    String?
  role         Role        @default(USER)
  level        IELTSLevel? @default(A2)
  targetScore  Float?
  refreshToken String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  testResults TestResult[]
  following   Follows[]    @relation("Following")
  followers   Follows[]    @relation("Followers")
}

model Admin {
  id           String   @id @default(uuid())
  password     String
  name         String
  role         Role     @default(ADMIN)
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  createdTests Test[]
}

model Ielts {
  id        String   @id @default(uuid())
  title     String
  tests     Test[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Test {
  id          String   @id @default(uuid())
  title       String
  type        TestType
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parts     Part[]
  createdBy Admin?       @relation(fields: [adminId], references: [id])
  adminId   String?
  results   TestResult[]
  ielts     Ielts?       @relation(fields: [ieltsId], references: [id])
  ieltsId   String?
}

model Part {
  id          String  @id @default(uuid())
  test        Test    @relation(fields: [testId], references: [id])
  testId      String
  number      Int
  title       String?
  description String?
  audioUrl    String? // Listening uchun

  sections  Section[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Section {
  id         String  @id @default(uuid())
  part       Part    @relation(fields: [partId], references: [id])
  partId     String
  title      String?
  content    String?
  hasBullets Boolean @default(false)
  imageUrl   String?

  questions Question[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Question {
  id         String       @id @default(uuid())
  section    Section      @relation(fields: [sectionId], references: [id])
  sectionId  String
  number     Int
  text       String?
  type       QuestionType

  answers     Answer[]
  userAnswers UserAnswer[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Answer {
  id          String   @id @default(uuid())
  question    Question @relation(fields: [questionId], references: [id])
  questionId  String
  variantText String?
  answer      String? // "A" yoki "A,C" formatida
  correct     Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([questionId])
}

model TestResult {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  test        Test      @relation(fields: [testId], references: [id])
  testId      String
  score       Float
  startedAt   DateTime  @default(now())
  completedAt DateTime? 

  userAnswers UserAnswer[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId, testId])
}

model UserAnswer {
  id         String      @id @default(uuid())
  result     TestResult? @relation(fields: [resultId], references: [id]) // <-- "?" qoâ€˜shildi
  resultId   String?
  question   Question    @relation(fields: [questionId], references: [id])
  questionId String
  userAnswer String
  isCorrect  Boolean
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([resultId, questionId])
}

model Follows {
  id          String   @id @default(uuid())
  follower    User     @relation(name: "Followers", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation(name: "Following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([followerId, followingId])
}
